{"version":3,"sources":["snippets.js","ui/Controls.js","ui/CodeSnippet.js","ui/ExampleLayout.js","examples/LineExample.js","examples/LinearPathExample.js","examples/CircleExample.js","examples/ImageExample.js","examples/RectangleExample.js","examples/PolygonExample.js","examples/EllipseExample.js","examples/ArcExample.js","examples/BezierCurveExample.js","serviceWorker.js","index.js","App.js"],"names":["snippets","Line","Linear","Circle","Ellipse","Image","Rectangle","Polygon","Arc","Bezier","ConfigProps","Controls","props","value","setValue","className","type","min","max","onChange","e","target","CodeSnippet","component","codeSample","CODE_EXAMPLES","ExampleLayout","title","componentProps","description","code","controls","role","dangerouslySetInnerHTML","__html","Object","keys","map","p","key","align","LineBasicExample","useState","brickSize","setBrickSize","lineComponent","width","height","from","to","bs","options","color","lineControls","codeExample","LinearPathExample","points","CircleExample","center","radius","ImageExample","src","RectangleExample","start","filled","PolygonExample","vertices","EllipseExample","vAxis","hAxis","ArcExample","Math","PI","stop","BezierCurveExample","controlPointX","controlPointY","Boolean","window","location","hostname","match","ReactDOM","render","alt","href","LineExample","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2LAgJeA,G,MAhJE,CACfC,KAAK,8PAaLC,OAAO,kPAaPC,OAAO,oOAaPC,QAAQ,8OAaRC,MAAM,iOAaNC,UAAU,qQAaVC,QAAQ,oWAmBRC,IAAI,4VAmBJC,OAAO,yVAkBPC,YAAY,sK,cCpHCC,MAjBf,SAAmBC,GAAQ,IACjBC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,SAEf,OACE,yBAAKC,UAAU,sCACb,8CAAoBF,GACpB,2BACEG,KAAK,QACLC,IAAI,KACJJ,MAAOA,EACPK,IAAI,KACJC,SAAU,SAACC,GAAD,OAAON,EAASM,EAAEC,OAAOR,QACnCE,UAAU,aCIHO,MAdf,SAAqBV,GAAQ,IACnBW,EAAcX,EAAdW,UAEFC,EAAaC,EAAcF,GAEjC,OACE,yBAAKR,UAAU,gBACb,0BAAMA,UAAU,gBACbS,KC0CME,MApDf,SAAuBd,GAAQ,IACrBW,EAAuEX,EAAvEW,UAAWI,EAA4Df,EAA5De,MADS,EACmDf,EAArDgB,sBADE,MACe,GADf,EACmBC,EAAgCjB,EAAhCiB,YAAaC,EAAmBlB,EAAnBkB,KAAMC,EAAanB,EAAbmB,SAElE,OACE,yBAAKhB,UAAU,kCACb,yBAAKA,UAAU,wGACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,4CAA4CiB,KAAK,SAC9D,wBAAIjB,UAAU,2BAA2BY,GACzC,uBAAGM,wBAAyB,CAAEC,OAAQL,MAExC,2BAAOd,UAAU,eACf,+BACE,4BACE,oCACA,oCACA,yCAGJ,+BAEIoB,OAAOC,KAAKR,GAAgBS,KAAI,SAAAC,GAC9B,OACE,wBAAIC,IAAKD,GACP,wBAAIE,MAAM,UACPF,EAECV,EAAeU,GAAG,IACjB,gCAAQ,gDAGb,wBAAIE,MAAM,UAAUZ,EAAeU,GAAG,IACtC,wBAAIE,MAAM,UAAUZ,EAAeU,GAAG,UAOjDR,IAGL,yBAAKf,UAAU,2CACZgB,EACD,yBAAKhB,UAAU,0BACZQ,MCPIkB,MAjCf,WAA8B,IAAD,EACSC,mBAAS,IADlB,mBACnBC,EADmB,KACRC,EADQ,KAGrBC,EACJ,kBAAC,IAAD,CAAOC,MAAM,MAAMC,OAAO,OACxB,kBAAC,IAAM9C,KAAP,CAAY+C,KAAM,CAAC,EAAG,GAAIC,GAAI,CAAC,EAAG,GAAIC,GAAIP,EAAWQ,QAAS,CAAEC,MAAO,YAIrEC,EAAgB,kBAAC,EAAD,CAAUxC,MAAO8B,EAAW7B,SAAU8B,IAEtDU,EAAe,kBAAC,EAAD,CAAa/B,UAAU,SAO5C,OACE,kBAAC,EAAD,CACEI,MAAM,iBACNE,YAAW,iIAIXN,UAAWsB,EACXf,KAAMwB,EACN1B,eAda,CACf,KAAQ,CAAC,cAAe,KAAK,GAC7B,GAAM,CAAC,cAAe,KAAK,IAazBG,SAAUsB,KC5BD,SAASE,IAAqB,IAAD,EACNb,mBAAS,IADH,mBAClCC,EADkC,KACvBC,EADuB,KAGpCC,EACJ,kBAAC,IAAD,CAAOC,MAAM,MAAMC,OAAO,OACvB,kBAAC,IAAD,CAAYG,GAAIP,EAAWa,OAAQ,CAAC,CAAC,EAAG,GAAI,CAAC,GAAI,GAAI,CAAC,EAAG,IAAK,CAAC,GAAI,QAIlEH,EAAgB,kBAAC,EAAD,CAAUxC,MAAO8B,EAAW7B,SAAU8B,IAEtDU,EAAe,kBAAC,EAAD,CAAa/B,UAAU,WAM5C,OACE,kBAAC,EAAD,CACEI,MAAM,wBACNE,YAAY,0GACZC,KAAMwB,EACN1B,eATa,CACf,OAAU,CAAC,mCAAoC,KAAK,IASlDL,UAAWsB,EACXd,SAAUsB,ICxBD,SAASI,IAAiB,IAAD,EACFf,mBAAS,IADP,mBAC9BC,EAD8B,KACnBC,EADmB,KAGhCC,EACJ,kBAAC,IAAD,CAAOC,MAAM,MAAMC,OAAO,OACxB,kBAAC,IAAD,CAAQG,GAAIP,EAAWe,OAAQ,CAAC,EAAG,GAAIC,OAAQ,KAI7CN,EAAgB,kBAAC,EAAD,CAAUxC,MAAO8B,EAAW7B,SAAU8B,IAEtDU,EAAe,kBAAC,EAAD,CAAa/B,UAAU,WAO5C,OACE,kBAAC,EAAD,CACEI,MAAM,mBACNE,YAAY,oEACZN,UAAWsB,EACXf,KAAMwB,EACN1B,eAXa,CACf,OAAU,CAAC,cAAe,KAAK,GAC/B,OAAU,CAAC,WAAY,OAUrBG,SAAUsB,ICzBD,SAASO,IAAgB,IAAD,EACDlB,mBAAS,IADR,mBAC7BC,EAD6B,KAClBC,EADkB,KAG/BC,EACJ,kBAAC,IAAD,CAAOC,MAAO,IAAKC,OAAQ,KACxB,kBAAC,IAAD,CAAOc,IAAI,4BAA4BX,GAAI,EAAGJ,MAAO,IAAKC,OAAQ,OAOjEO,GAFgB,kBAAC,EAAD,CAAUzC,MAAO8B,EAAW7B,SAAU8B,IAEvC,kBAAC,EAAD,CAAarB,UAAU,WAM5C,OACE,kBAAC,EAAD,CACEI,MAAM,kBACNE,YAAY,8BACZC,KAAMwB,EACN1B,eATa,CACf,IAAO,CAAC,SAAU,KAAK,IASrBL,UAAWsB,ICxBF,SAASiB,IAAoB,IAAD,EACLpB,mBAAS,IADJ,mBACjCC,EADiC,KACtBC,EADsB,KAGnCC,EACJ,kBAAC,IAAD,CAAOC,MAAO,IAAKC,OAAQ,KACzB,kBAAC,IAAD,CAAWG,GAAIP,EAAWoB,MAAO,CAAC,EAAG,GAAIjB,MAAO,EAAGC,OAAQ,GAAII,QAAS,CAAEa,QAAQ,MAIhFX,EAAgB,kBAAC,EAAD,CAAUxC,MAAO8B,EAAW7B,SAAU8B,IAEtDU,EAAe,kBAAC,EAAD,CAAa/B,UAAU,cAQ5C,OACE,kBAAC,EAAD,CACEI,MAAM,sBACNE,YAAY,oIACZC,KAAMwB,EACN1B,eAXa,CACf,MAAS,CAAC,cAAe,KAAK,GAC9B,MAAS,CAAC,UAAW,KAAK,GAC1B,OAAU,CAAC,UAAW,KAAK,IASzBL,UAAWsB,EACXd,SAAUsB,IC1BD,SAASY,IAAkB,IAAD,EACHvB,mBAAS,IADN,mBAC/BC,EAD+B,KACpBC,EADoB,KASjCC,EACJ,kBAAC,IAAD,CAAOC,MAAM,MAAMC,OAAO,OACxB,kBAAC,IAAD,CAASG,GAAIP,EAAWuB,SATX,CACf,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,IAKyCf,QAAS,CAAEC,MAAO,aAI5DC,EAAgB,kBAAC,EAAD,CAAUxC,MAAO8B,EAAW7B,SAAU8B,IAEtDU,EAAe,kBAAC,EAAD,CAAa/B,UAAU,YAM5C,OACE,kBAAC,EAAD,CACEI,MAAM,oBACNE,YAAY,2CACZC,KAAMwB,EACN1B,eATa,CACf,SAAY,CAAC,8BAA+B,KAAK,IAS/CL,UAAWsB,EACXd,SAAUsB,IC9BD,SAASc,IAAkB,IAAD,EACJzB,mBAAS,IADL,mBAChCC,EADgC,KACrBC,EADqB,KAGjCC,EACJ,kBAAC,IAAD,CAAOC,MAAM,MAAMC,OAAO,OACxB,kBAAC,IAAM3C,QAAP,CAAe8C,GAAIP,EAAWe,OAAQ,CAAC,EAAG,GAAIU,MAAO,EAAGC,MAAO,KAI7DhB,EAAgB,kBAAC,EAAD,CAAUxC,MAAO8B,EAAW7B,SAAU8B,IAEtDU,EAAe,kBAAC,EAAD,CAAa/B,UAAU,YAQ5C,OACE,kBAAC,EAAD,CACEI,MAAM,oBACNE,YAAY,8HACZC,KAAMwB,EACN1B,eAXa,CACf,OAAU,CAAC,cAAe,KAAK,GAC/B,MAAS,CAAC,WAAY,KAAK,GAC3B,MAAS,CAAC,WAAY,KAAK,IASzBL,UAAWsB,EACXd,SAAUsB,IC1BD,SAASiB,IAAc,IAAD,EAEC5B,mBAAS,IAFV,mBAE3BC,EAF2B,KAEhBC,EAFgB,KAI7BC,EACJ,kBAAC,IAAD,CAAOC,MAAO,IAAKC,OAAQ,KACzB,kBAAC,IAAMvC,IAAP,CAAW0C,GAAIP,EAAWe,OAAQ,CAAC,GAAI,GAAIU,MAAO,EAAGC,MAAO,EAAGN,MAAOQ,KAAKC,GAAIC,KAAgB,GAAVF,KAAKC,MAIxFnB,EAAgB,kBAAC,EAAD,CAAUxC,MAAO8B,EAAW7B,SAAU8B,IAEtDU,EAAe,kBAAC,EAAD,CAAa/B,UAAU,QAM5C,OACE,kBAAC,EAAD,CACEI,MAAM,gBACNE,YAAY,kOACZN,UAAWsB,EACXf,KAAMwB,EACN1B,eAVa,CACf,OAAU,CAAC,oCAAqC,KAAK,IAUnDG,SAAUsB,ICzBD,SAASqB,IAAsB,IAAD,EACPhC,mBAAS,IADF,mBACnCC,EADmC,KACxBC,EADwB,KAGrCC,EACJ,kBAAC,IAAD,CAAOC,MAAM,MAAMC,OAAO,OACxB,kBAAC,IAAD,CACEG,GAAIP,EACJK,KAAM,CAAC,GAAG,GACVC,GAAI,CAAC,GAAI,IACT0B,cAAe,CAAC,EAAG,IACnBC,cAAe,CAAC,GAAI,MAKpBvB,EAAgB,kBAAC,EAAD,CAAUxC,MAAO8B,EAAW7B,SAAU8B,IAEtDU,EAAe,kBAAC,EAAD,CAAa/B,UAAU,WAS5C,OACE,kBAAC,EAAD,CACEI,MAAM,oBACNE,YAAY,8HACZN,UAAWsB,EACXf,KAAMwB,EACN1B,eAba,CACf,KAAQ,CAAC,cAAe,KAAK,GAC7B,GAAM,CAAC,cAAe,KAAK,GAC3B,cAAiB,CAAC,cAAe,KAAK,GACtC,cAAiB,CAAC,cAAe,KAAK,IAUpCG,SAAUsB,IC5BIwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCOD,WAEb,OACE,yBAAKpE,UAAU,WACb,6BAASA,UAAU,oCACjB,yBAAKA,UAAU,+BACb,yBAAKA,UAAU,iCACb,qCAEF,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,iCAAiC8C,IAAI,mCAAmCuB,IAAI,oBAAoBrC,OAAO,SAExH,yBAAKhC,UAAU,iCACb,uCAKN,6BAASA,UAAU,2BACjB,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,UAAU8C,IAAI,gCAAgCuB,IAAI,aAAatC,MAAM,QAEtF,4CAEF,yBAAK/B,UAAU,eACb,iEACqC,uBAAGsE,KAAK,uBAAR,WADrC,wGAKF,6BACA,yBAAKtE,UAAU,gBACb,4CACA,yBAAKA,UAAU,iBACb,wDAKJ,yBAAKA,UAAU,gBACb,qCACA,kGAEM,0BAAMA,UAAU,gBAAgB,aAFtC,oCAIA,kCACM,0BAAMA,UAAU,gBAAgB,aADtC,6FAEmC,qCAFnC,6DAIA,qDACyB,0BAAMA,UAAU,gBAAgB,aADzD,oDAIA,yBAAKA,UAAU,6BACb,8BACCf,EAASU,gBAKhB,6BAASK,UAAU,2BACjB,0CACA,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,eACb,kBAACuE,EAAD,OAEF,yBAAKvE,UAAU,eACb,kBAACwC,EAAD,OAEF,yBAAKxC,UAAU,eACb,kBAAC0C,EAAD,OAEF,yBAAK1C,UAAU,eACb,kBAAC6C,EAAD,OAEF,yBAAK7C,UAAU,eACb,kBAAC+C,EAAD,OAEF,yBAAK/C,UAAU,eACb,kBAACkD,EAAD,OAEF,yBAAKlD,UAAU,eACb,kBAACoD,EAAD,OAEF,yBAAKpD,UAAU,eACb,kBAACuD,EAAD,OAEF,yBAAKvD,UAAU,eACb,kBAAC2D,EAAD,YDhGI,MAASa,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.df7140e0.chunk.js","sourcesContent":["const snippets = {\n  Line: `\n    import React from 'react'\n    import Board from 'react-legra'\n\n    function Example () {\n\n      return (\n        <Board>\n          <Board.Line from={[1, 1]} to={[4, 4]} options={{ color: 'green' }} />\n        </Board>\n      )\n    }\n  `,\n  Linear: `\n    import React from 'react'\n    import Board from 'react-legra'\n\n    function Example () {\n\n      return (\n        <Board>\n          <Board.Linear points={[[1, 1], [4, 1], [1, 4], [4, 4]]}/>\n        </Board>\n      )\n    }\n  `,\n  Circle: `\n    import React from 'react'\n    import Board from 'react-legra'\n\n    function Example () {\n\n      return (\n        <Board>\n          <Board.Circle center={[3, 3]} radius={2} />\n        </Board>\n      )\n    }\n  `,\n  Ellipse: `\n    import React from 'react'\n    import Board from 'react-legra'\n\n    function Example () {\n\n      return (\n        <Board>\n          <Board.Ellipse center={[8, 8]} vAxis={2} hAxis={3} />\n        </Board>\n      )\n    }\n  `,\n  Image: `\n    import React from 'react'\n    import Board from 'react-legra'\n\n    function Example () {\n\n      return (\n        <Board>\n          <Board.Image src=\"/cat.jpg\" bs={15} />\n        </Board>\n      )\n    }\n  `,\n  Rectangle: `\n    import React from 'react'\n    import Board from 'react-legra'\n\n    function Example () {\n\n      return (\n        <Board>\n          <Rectangle start={[5, 3]} width={5} height={12} options={{ filled: true }}/>\n        </Board>\n      )\n    }\n  `,\n  Polygon: `\n    import React from 'react'\n    import Board from 'react-legra'\n\n    function Example () {\n      const vertices = [\n        [3, 1],\n        [3, 8],\n        [10, 1],\n        [10, 8]\n      ]\n\n      return (\n        <Board>\n          <Board.Polygon vertices={vertices} options={{ color: 'yellow' }} />\n        </Board>\n      )\n    }\n  `,\n  Arc: `\n    import React from 'react'\n    import Board from 'react-legra'\n\n    function Example () {\n\n      return (\n        <Board>\n          <Board.Arc\n            center={[10, 3]}\n            vAxis={4}\n            hAxis={5}\n            start={Math.PI}\n            stop={Math.PI * .5}\n           />\n        </Board>\n      )\n    }\n  `,\n  Bezier: `\n    import React from 'react'\n    import Board from 'react-legra'\n\n    function Example () {\n\n      return (\n        <Board>\n          <Board.BezierCurve\n            from={[10,5]}\n            to={[20, 20]}\n            controlPointX={[8, 30]}\n            controlPointY={[18, 1]}\n          />\n        </Board>\n      )\n    }\n  `,\n  ConfigProps: `\n    options: { // To control the look and feel of the component\n      filled?: false,\n      color?: blue\n    },\n    bs: 24 // Brick size, default to 24\n  `\n}\n\nexport default snippets\n","import React from 'react'\n\nfunction Controls (props) {\n  const { value, setValue } = props\n\n  return(\n    <div className=\"slidecontainer mx-auto text-center\">\n      <small>Brick size: {value}</small>\n      <input\n        type=\"range\"\n        min=\"10\"\n        value={value}\n        max=\"50\"\n        onChange={(e) => setValue(e.target.value)}\n        className=\"slider\"/>\n    </div>\n  )\n}\n\nexport default Controls\n","import React from 'react'\n\nimport CODE_EXAMPLES from '../snippets'\n\nfunction CodeSnippet(props) {\n  const { component } = props\n\n  const codeSample = CODE_EXAMPLES[component]\n\n  return (\n    <pre className=\"language-jsx\">\n      <code className=\"language-jsx\">\n        {codeSample}\n      </code>\n    </pre>\n  )\n}\n\nexport default CodeSnippet\n","import React from 'react'\n\nfunction ExampleLayout(props) {\n  const { component, title, componentProps = {}, description, code, controls } = props\n\n  return (\n    <div className=\"w-full lg:flex justify-between\">\n      <div className=\"code-card border border-gray-400 bg-white rounded-b p-4 flex flex-col justify-between leading-normal\">\n        <div className=\"mb-8\">\n          <div className=\"border-l-4 border-blue-700 text-black p-4\" role=\"alert\">\n            <h4 className=\"font-bold text-2xl mb-2\">{title}</h4>\n            <p dangerouslySetInnerHTML={{ __html: description }}></p>\n          </div>\n          <table className=\"table-props\">\n            <thead>\n              <tr>\n                <th>prop</th>\n                <th>type</th>\n                <th>default</th>\n              </tr>\n            </thead>\n            <tbody>\n              {\n                Object.keys(componentProps).map(p => {\n                  return (\n                    <tr key={p}>\n                      <td align=\"center\">\n                        {p}\n                        {\n                          componentProps[p][2] &&\n                          (<strong><small> (required)</small></strong>)\n                        }\n                      </td>\n                      <td align=\"center\">{componentProps[p][0]}</td>\n                      <td align=\"center\">{componentProps[p][1]}</td>\n                    </tr>\n                  )\n                })\n              }\n            </tbody>\n          </table>\n          {code}\n        </div>\n      </div>\n      <div className=\"flex-none bg-cover overflow-hidden ml-8\">\n        {controls}\n        <div className=\"border border-blue-700\">\n          {component}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ExampleLayout\n","import React, { useState } from 'react'\nimport Board from 'react-legra'\n\nimport Controls from '../ui/Controls'\nimport CodeSnippet from '../ui/CodeSnippet'\nimport ExampleLayout from '../ui/ExampleLayout'\n\nfunction LineBasicExample () {\n  const [ brickSize, setBrickSize ] = useState(24)\n\n  const lineComponent = (\n    <Board width=\"500\" height=\"500\">\n      <Board.Line from={[1, 1]} to={[4, 4]} bs={brickSize} options={{ color: 'green' }} />\n    </Board>\n  )\n\n  const lineControls = (<Controls value={brickSize} setValue={setBrickSize} />)\n\n  const codeExample = (<CodeSnippet component=\"Line\" />)\n\n  const ownProps = {\n    'from': ['Array[x, y]', '-', true],\n    'to': ['Array[x, y]', '-', true]\n  }\n\n  return (\n    <ExampleLayout\n      title=\"Line Component\"\n      description={`\n        Draw a line from point <strong>a<strong> <i>(x1, y1)</i>\n        to point <strong>b<strong> <i>(x2, y2)</i>\n      `}\n      component={lineComponent}\n      code={codeExample}\n      componentProps={ownProps}\n      controls={lineControls}\n    />\n  )\n}\n\nexport default LineBasicExample\n","import React, { useState } from 'react'\nimport Board, { LinearPath } from 'react-legra'\n\nimport Controls from '../ui/Controls'\nimport CodeSnippet from '../ui/CodeSnippet'\nimport ExampleLayout from '../ui/ExampleLayout'\n\nexport default function LinearPathExample() {\n  const [ brickSize, setBrickSize ] = useState(24)\n\n  const lineComponent = (\n    <Board width=\"500\" height=\"500\">\n       <LinearPath bs={brickSize} points={[[2, 1], [12, 1], [1, 10], [12, 10]]} />\n    </Board>\n  )\n\n  const lineControls = (<Controls value={brickSize} setValue={setBrickSize} />)\n\n  const codeExample = (<CodeSnippet component=\"Linear\" />)\n\n  const ownProps = {\n    'points': ['Array[ [x1, y1], [x2, y2], ... ]', '-', true]\n  }\n\n  return (\n    <ExampleLayout\n      title=\"Linear Path Component\"\n      description=\"Draw a set of lines connecting the specified points. `points` is an array of arrays of points `(x, y)`.\"\n      code={codeExample}\n      componentProps={ownProps}\n      component={lineComponent}\n      controls={lineControls}\n    />\n  )\n}\n","import React, { useState } from 'react'\nimport Board, { Circle } from 'react-legra'\n\nimport Controls from '../ui/Controls'\nimport CodeSnippet from '../ui/CodeSnippet'\nimport ExampleLayout from '../ui/ExampleLayout'\n\nexport default function CircleExample() {\n  const [ brickSize, setBrickSize ] = useState(24)\n\n  const lineComponent = (\n    <Board width=\"500\" height=\"500\">\n      <Circle bs={brickSize} center={[9, 8]} radius={4} />\n    </Board>\n  )\n\n  const lineControls = (<Controls value={brickSize} setValue={setBrickSize} />)\n\n  const codeExample = (<CodeSnippet component=\"Circle\" />)\n\n  const ownProps = {\n    'center': ['Array[x, y]', '-', true],\n    'radius': ['Interger', '10']\n  }\n\n  return (\n    <ExampleLayout\n      title=\"Cricle Component\"\n      description=\" Draw a circle from the `center` point and with the given `radius\"\n      component={lineComponent}\n      code={codeExample}\n      componentProps={ownProps}\n      controls={lineControls}\n    />\n  )\n}\n","import React, { useState } from 'react'\nimport Board, { Image } from 'react-legra'\n\nimport Controls from '../ui/Controls'\nimport CodeSnippet from '../ui/CodeSnippet'\nimport ExampleLayout from '../ui/ExampleLayout'\n\nexport default function ImageExample() {\n  const [ brickSize, setBrickSize ] = useState(15)\n\n  const lineComponent = (\n    <Board width={500} height={500}>\n       <Image src=\"/react-legra-site/cat.jpg\" bs={8} width={500} height={500} />\n    </Board>\n  )\n\n  // TODO: Add the controls, but render the img on each render, since now we 'clean' the canvas\n  const lineControls = (<Controls value={brickSize} setValue={setBrickSize} />)\n\n  const codeExample = (<CodeSnippet component=\"Image\" />)\n\n  const ownProps = {\n    'src': ['String', '-', true],\n  }\n\n  return (\n    <ExampleLayout\n      title=\"Image Component\"\n      description=\"Draw an image with Legos!!!\"\n      code={codeExample}\n      componentProps={ownProps}\n      component={lineComponent}\n    />\n  )\n}\n","import React, { useState } from 'react'\nimport Board, { Rectangle } from 'react-legra'\n\nimport Controls from '../ui/Controls'\nimport CodeSnippet from '../ui/CodeSnippet'\nimport ExampleLayout from '../ui/ExampleLayout'\n\nexport default function RectangleExample() {\n  const [ brickSize, setBrickSize ] = useState(24)\n\n  const lineComponent = (\n    <Board width={500} height={500}>\n      <Rectangle bs={brickSize} start={[5, 3]} width={5} height={12} options={{ filled: true }}/>\n    </Board>\n  )\n\n  const lineControls = (<Controls value={brickSize} setValue={setBrickSize} />)\n\n  const codeExample = (<CodeSnippet component=\"Rectangle\" />)\n\n  const ownProps = {\n    'start': ['Array[x, y]', '-', true],\n    'width': ['Integer', '-', true],\n    'height': ['Integer', '-', true]\n  }\n\n  return (\n    <ExampleLayout\n      title=\"Rectangle Component\"\n      description=\"Draw a rectangle given the top-left coordenates [x, y] (`start`) as the center point and with the specified `width` and `height`.\"\n      code={codeExample}\n      componentProps={ownProps}\n      component={lineComponent}\n      controls={lineControls}\n    />\n  )\n}\n","import React, { useState } from 'react'\nimport Board, { Polygon } from 'react-legra'\n\nimport Controls from '../ui/Controls'\nimport CodeSnippet from '../ui/CodeSnippet'\nimport ExampleLayout from '../ui/ExampleLayout'\n\nexport default function PolygonExample() {\n  const [ brickSize, setBrickSize ] = useState(24)\n  const vertices = [\n    [3, 1],\n    [3, 8],\n    [10, 1],\n    [10, 8]\n  ]\n\n  const lineComponent = (\n    <Board width=\"500\" height=\"500\">\n      <Polygon bs={brickSize} vertices={vertices} options={{ color: 'yellow' }} />\n    </Board>\n  )\n\n  const lineControls = (<Controls value={brickSize} setValue={setBrickSize} />)\n\n  const codeExample = (<CodeSnippet component=\"Polygon\" />)\n\n  const ownProps = {\n    'vertices': ['Array[ [x1, y1], [x2, y2] ]', '-', true]\n  }\n\n  return (\n    <ExampleLayout\n      title=\"Polygon Component\"\n      description=\"Draw a polygon with the given `vertices`\"\n      code={codeExample}\n      componentProps={ownProps}\n      component={lineComponent}\n      controls={lineControls}\n    />\n  )\n}\n","import React, { useState } from 'react'\nimport Board from 'react-legra'\n\nimport Controls from '../ui/Controls'\nimport CodeSnippet from '../ui/CodeSnippet'\nimport ExampleLayout from '../ui/ExampleLayout'\n\nexport default function EllipseExample() {\n const [ brickSize, setBrickSize ] = useState(24)\n\n  const lineComponent = (\n    <Board width=\"500\" height=\"500\">\n      <Board.Ellipse bs={brickSize} center={[8, 8]} vAxis={4} hAxis={7} />\n    </Board>\n  )\n\n  const lineControls = (<Controls value={brickSize} setValue={setBrickSize} />)\n\n  const codeExample = (<CodeSnippet component=\"Ellipse\" />)\n\n  const ownProps = {\n    'center': ['Array[x, y]', '-', true],\n    'vAxis': ['Interger', '-', true],\n    'hAxis': ['Interger', '-', true]\n  }\n\n  return (\n    <ExampleLayout\n      title=\"Ellipse Component\"\n      description=\"Draw an ellipse from the `center` point and the horizontal and vertical axis lenght controlled by `hAxis` and `vAxis` props\"\n      code={codeExample}\n      componentProps={ownProps}\n      component={lineComponent}\n      controls={lineControls}\n    />\n  )\n}\n","import React, { useState } from 'react'\nimport Board from 'react-legra'\n\nimport Controls from '../ui/Controls'\nimport CodeSnippet from '../ui/CodeSnippet'\nimport ExampleLayout from '../ui/ExampleLayout'\n\nexport default function ArcExample() {\n\n  const [ brickSize, setBrickSize ] = useState(24)\n\n  const lineComponent = (\n    <Board width={500} height={500}>\n      <Board.Arc bs={brickSize} center={[10, 3]} vAxis={4} hAxis={5} start={Math.PI} stop={Math.PI * .5} />\n    </Board>\n  )\n\n  const lineControls = (<Controls value={brickSize} setValue={setBrickSize} />)\n\n  const codeExample = (<CodeSnippet component=\"Arc\" />)\n\n  const ownProps = {\n    'points': ['Array[ [x1, y1] , [x2, y1], ... ]', '-', true]\n  }\n\n  return (\n    <ExampleLayout\n      title=\"Arc Component\"\n      description=\"An arc is just a **section** of an ellipse controlled by the additional `start` and `stop` props which represent the angle of the arc, also you can _'close'_ the arc form by these 2 points with the `filled` prop set to true\"\n      component={lineComponent}\n      code={codeExample}\n      componentProps={ownProps}\n      controls={lineControls}\n    />\n  )\n}\n","import React, { useState } from 'react'\nimport Board, { BezierCurve } from 'react-legra'\n\nimport Controls from '../ui/Controls'\nimport CodeSnippet from '../ui/CodeSnippet'\nimport ExampleLayout from '../ui/ExampleLayout'\n\nexport default function BezierCurveExample() {\n  const [ brickSize, setBrickSize ] = useState(10)\n\n  const lineComponent = (\n    <Board width=\"500\" height=\"500\">\n      <BezierCurve\n        bs={brickSize}\n        from={[10,5]}\n        to={[20, 20]}\n        controlPointX={[8, 30]}\n        controlPointY={[18, 1]}\n      />\n    </Board>\n  )\n\n  const lineControls = (<Controls value={brickSize} setValue={setBrickSize} />)\n\n  const codeExample = (<CodeSnippet component=\"Bezier\" />)\n\n  const ownProps = {\n    'from': ['Array[x, y]', '-', true],\n    'to': ['Array[x, y]', '-', true],\n    'controlPointX': ['Array[x, y]', '-', true],\n    'controlPointY': ['Array[x, y]', '-', true],\n  }\n\n  return (\n    <ExampleLayout\n      title=\"Bezieri Component\"\n      description=\"Draws a bézier curve from `(x1, y1)` to `(x2, y2)` with `(cp1x, cp1y)` and `(cp2x, cp2y)` as the curve's control points.\"\n      component={lineComponent}\n      code={codeExample}\n      componentProps={ownProps}\n      controls={lineControls}\n    />\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react'\n\nimport snippets from './snippets'\nimport LineExample from './examples/LineExample'\nimport LinearPathExample from './examples/LinearPathExample'\nimport CircleExample from './examples/CircleExample'\nimport ImageExample from './examples/ImageExample'\nimport RectangleExample from './examples/RectangleExample'\nimport PolygonExample from './examples/PolygonExample'\nimport EllipseExample from './examples/EllipseExample'\nimport ArcExample from './examples/ArcExample'\nimport BezierCurveExample from './examples/BezierCurveExample'\n\nexport default function App() {\n\n  return (\n    <div className=\"content\">\n      <section className=\"container mx-auto hero h-64 mt-5\">\n        <div className=\"min-h-full flex text-center\">\n          <div className=\"flex-1 self-center hero-react\">\n            <p>React</p>\n          </div>\n          <div className=\"flex-1 self-start\">\n            <img className=\"self-center legra-logo mx-auto\" src=\"/react-legra-site/react-site.png\" alt=\"legrajs & reactjs\" height=\"200\" />\n          </div>\n          <div className=\"flex-1 self-center hero-legra\">\n            <p>Legra</p>\n          </div>\n        </div>\n      </section>\n\n      <section className=\"container mx-auto mt-20\">\n        <div className=\"flex\">\n          <div className=\"flex-none\">\n            <img className=\"rl-icon\" src=\"/react-legra-site/favicon.png\" alt=\"legra icon\" width=\"45\" />\n          </div>\n          <h1>React legra</h1>\n        </div>\n        <div className=\"description\">\n          <p>\n            This lib is a react wrapper around <a href=\"https://legrajs.com\">LegraJS</a>,\n            so far the api is very similar and we'll try to add a little bit more functionality over the time\n          </p>\n        </div>\n        <hr />\n        <div className=\"installation\">\n          <h2>Installation</h2>\n          <pre className=\"language-bash\">\n            <code>\n              yarn add react-legra\n            </code>\n          </pre>\n        </div>\n        <div className=\"installation\">\n          <h2>Usage</h2>\n          <p>\n            To start drawing, you first need to create a canvas to draw on,\n            the <code className=\"language-jsx\">{\"<Board />\"}</code> component will do that for you.\n          </p>\n          <p>\n            The <code className=\"language-jsx\">{\"<Board />\"}</code> component recieve the same props as a `canvas` element,\n            and additionally you can set the <b>canvas</b> prop, to reference all the drawing to an external canvas\n          </p>\n          <p>\n            All the components but <code className=\"language-jsx\">{\"<Board />\"}</code>,\n            recieve (optionally) some configuration props:\n          </p>\n          <pre className=\"language-js default-props\">\n            <code>\n            {snippets.ConfigProps}\n            </code>\n          </pre>\n        </div>\n      </section>\n      <section className=\"container mx-auto mt-10\">\n        <h2>Components</h2>\n        <div className=\"components-samples\">\n          <div className=\"block my-10\">\n            <LineExample />\n          </div>\n          <div className=\"block my-10\">\n            <LinearPathExample />\n          </div>\n          <div className=\"block my-10\">\n            <CircleExample />\n          </div>\n          <div className=\"block my-10\">\n            <ImageExample />\n          </div>\n          <div className=\"block my-10\">\n            <RectangleExample />\n          </div>\n          <div className=\"block my-10\">\n            <PolygonExample />\n          </div>\n          <div className=\"block my-10\">\n            <EllipseExample />\n          </div>\n          <div className=\"block my-10\">\n            <ArcExample />\n          </div>\n          <div className=\"block my-10\">\n            <BezierCurveExample />\n          </div>\n        </div>\n      </section>\n    </div>\n  )\n}\n"],"sourceRoot":""}